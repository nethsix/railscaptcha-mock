<div class="wrap">
  <section id="main-container" role="main" style="min-height: 522px;">
    <header class="title-container">
		<div class="title">
		<div class="col-sm-3">
			<h1>Documentation</h1>
		</div>
		<div class="col-sm-9">
					</div>
	</div>
		<div class="subtitle">
				<div class="col-sm-9">
			<p>Get Started in less than a minute</p>
		</div>
			</div>
</header>
<div class="container-fluid">
	<div class="row">
		<div class="col-sm-12">
			<div class="wrapper-collapsed wrapper-documentation">
				<div class="row">
					<article class="col-sm-9" ng-non-bindable><div class="documentation-text" ng-non-bindable>

	<h1><b>iOS Documentation</b></h1>
    <hr>

    <h1>Installing the SDK with CocoaPods</h1>

    <div class="w-embed w-video box-video">
    	<iframe class="embedly-embed" src="https://cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2F53f99A_ed6M%3Ffeature%3Doembed&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D53f99A_ed6M&amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F53f99A_ed6M%2Fhqdefault.jpg&amp;key=c4e54deccf4d4ec997a64902e9a30300&amp;type=text%2Fhtml&amp;schema=youtube" scrolling="no" frameborder="0" allowfullscreen="1"></iframe>
  	</div>

	<br/>

	<p>The easiest way to get the SDK into your iOS project is to use CocoaPods. Install CocoaPods using <pre class="code"><code>gem install cocoapods</code></pre> If this is your first time using CocoaPods, run <pre class="code"><code>pod setup</code></pre> to create a local CocoaPods spec mirror.
	Create a file in your Xcode project called Podfile and add the following line: <pre class="code"><code>pod 'Ringcaptcha'</code></pre> In your Xcode project directory run <pre class="code"><code>pod install</code></pre> to download and install the library. CocoaPods will create a new Xcode workspace. Remember to open up this workspace in Xcode and not your project.</p>

	<br/>

	<h1>Installing the SDK Manually</h1>

	<br/>

	<p>To embed the SDK just drag &amp; drop the <a href="https://github.com/ringcaptcha/ringcaptcha-ios/archive/master.zip">iOS SDK library</a> into your libs folder in your XCode project.</p>

	<p>After adding it, make sure that in every target that the SDK will be included you link it to <strong>Ringcaptcha.framework</strong> and <strong>CoreTelephony.framework</strong>.</p>

	<br/>
	<div class="text-center">
		<img src="/assets/images/docs/ios-xcode-flags.png" alt="Simple widget" width="618px" height="180px">
	</div>
	<br/>

	<p>Also Include under your Project <b>"Build Settings"</b>, <b>"Linking"</b> -> <b>"Other Linker Flags"</b> the following value: <b>"-ObjC -all_load"</b>.</p>

	<br/>
	<div class="text-center">
		<img src="/assets/images/docs/ios-xcode-settings.png" alt="Simple widget" width="618px" height="350px">
	</div>
	<br/>

	<p>On each file you will be including RingCaptcha, make sure you import the header file.</p>

	<div class="highlight copyable">
		<pre class="code"><code>#import &lt;Ringcaptcha/Ringcaptcha.h&gt;</code></pre>
	</div>

	<p class="text-center"><a class="btn btn-default" href="https://github.com/ringcaptcha/ringcaptcha-ios/archive/master.zip"><i class="icon icon-download"></i> Download iOS SDK now</a></p>

    <br/>

    <h1>Launching an Onboarding widget</h1>

	<p>To use the one screen onboarding process bundled into the SDK with the option of onboarding automatically from a website PIN, all you need to do is call the <b>Ringcaptcha verifyOnboardWithAppKey</b> method as described below from any user action like starting the app for the first time when is not logged-in.</p>

	<br/>

	<div class="text-center">
		<img src="/assets/images/docs/ios-onboard-sms.png" alt="Simple widget" width="216px" height="384px">
		<img src="/assets/images/docs/ios-onboard-pin.png" alt="Simple widget" width="216px" height="384px">
		<img src="/assets/images/docs/ios-onboarded.png" alt="Simple widget" width="216px" height="384px">
	</div>

    <br/>

    <p>On your ViewController, in the method hooked to the user event add the following line of code.</p>

    <div class="highlight copyable">
	<pre class="code"><code>[Ringcaptcha verifyOnboardWithAppKey:@&quot;fe8i7agubujuqe2a6eta&quot; andSecretKey:@&quot;3e1i6y9i6atuby1ifa1o&quot; inViewController:self delegate:nil success: ^(RingcaptchaVerification *verification) {
	NSLog(@"Successful onboarding");
} cancel:^(RingcaptchaVerification *verification) {
	NSLog(@"Onboarding cancelled");
}];</code></pre></div>

	<p>You can choose to implement the success and cancel blocks or implement the following delegate methods that will be called once the user exits the verification widget either successfully or cancelled:</p>

	<div class="highlight copyable">
	<pre class="code"><code>- (void) didFinishPhoneNumberVerification: (RingcaptchaVerification*) verification;
- (void) didFinishPhoneNumberVerificationWithCancel: (RingcaptchaVerification*) verification;</code></pre></div>

	<p>In the event the widget does not find an open session or is unable to attribute the onboarding process to a user, it will automatically start the verification process by asking the phone number to the user to send the PIN code to.</p>

    <br/>

	<h1>Launching a Verification widget</h1>

	<p>To use the two screen verification process bundled into the SDK, all you need to do is call the <b>Ringcaptcha verifyPhoneNumberWithAppKey</b> method as described below from any user action like tapping a button for <b>Verify your Phone Number</b>.</p>

	<br/>

	<div class="text-center">
		<img src="/assets/images/docs/ios-phone.png" alt="Simple widget" width="216px" height="384px">
		<img src="/assets/images/docs/ios-pin.png" alt="Simple widget" width="216px" height="384px">
		<img src="/assets/images/docs/ios-verified.png" alt="Simple widget" width="216px" height="384px">
	</div>

    <br/>

	<p>On your ViewController, in the method hooked to the user event add the following line of code.</p>

	<div class="highlight copyable">
		<pre class="code"><code>[Ringcaptcha verifyPhoneNumberWithAppKey:@&quot;egadelycufyzudegy1a8&quot; andSecretKey:@&quot;i4o7usy7o5afo4y9asos&quot; inViewController:self delegate:nil success: ^(RingcaptchaVerification *verification) {
	NSLog(@"Successful onboarding");
} cancel:^(RingcaptchaVerification *verification) {
	NSLog(@"Onboarding cancelled");
}];</code></pre>
	</div>

	<p>And implement the following delegate methods that will be called once the user exits the verification widget either successfully or cancelled:</p>

	<div class="highlight copyable">
	<pre class="code"><code>- (void) didFinishPhoneNumberVerification: (RingcaptchaVerification*) verification;
- (void) didFinishPhoneNumberVerificationWithCancel: (RingcaptchaVerification*) verification;</code></pre></div>

	<br/>

    <h2>Implementing SMS Deep-Linking</h2>

    <p>Every SMS link sent by RingCaptcha will deep-link the user to either the application store for onboarding or the installed application for verification. Ringcaptcha link will redirect to the configured scheme and host for the app whenever a user opens the SMS link in their browser. In order to implement the custom sceheme in your app to populate automatically the PIN code, you will need to create a handler for the custom scheme and set URL type like the following:</p>

    <pre class="code"><code style="java">scheme://ringcaptcha/verified?token={TOKEN}&amp;pin={PIN_CODE}</code></pre>

    <p>In your project file, in the Info section, under in the URL types add the app identifier and URL scheme. Then just add a similar code to handle the custom-scheme to your <b>AppDelegate.m</b> file:</p>

    <div class="highlight copyable">
      <pre class="code"><code style="java">- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {

    NSMutableDictionary *params = [[NSMutableDictionary alloc] init];
    NSArray *elts = [[url query] componentsSeparatedByString:@"&"];
    for(int i = 0;i<[elts count];i++) {
        NSArray *pars = [[elts objectAtIndex:i] componentsSeparatedByString:@"="];
        [params setObject:[pars objectAtIndex:1] forKey:[pars objectAtIndex:0]];
    }

    if([params objectForKey:@"pin"] != nil) {

        UIWindow *window=[UIApplication sharedApplication].keyWindow;
        UIViewController* mainController = (UIViewController*) window.rootViewController;

        NSString* pin = [params objectForKey:@"pin"];
        [Ringcaptcha verifyOnboardWithAppKeyAndPinCode:@&quot;fe8i7agubujuqe2a6eta&quot;
            andSecretKey:@&quot;3e1i6y9i6atuby1ifa1o&quot;
            andPin:pin
            inViewController:mainController
            delegate: nil
            success:^(RingcaptchaVerification *verification) {
                NSLog(@"Verification process ended successfully? %@", verification.verificationId);
                NSLog(@"Verification process ended successfully? %d", verification.verificationSuccessful);
                NSLog(@"Verification process ended successfully? %@", verification.phoneNumber);
                NSLog(@"Verification process ended successfully? %@", verification.errorDescription);
            }
            cancel:^(RingcaptchaVerification *verification) {
                NSLog(@"Verification process cancelled? %d", verification.verificationSuccessful);
            }
         ];
    }
    return YES;
}
        </code></pre>
    </div>

    <br/>

  	<h1>Implementing your own UI</h1>

    <br/>

    <p>Should you be interested on using your own UI and calling the backend of RingCaptcha, you can do so by calling the API methods bundled into the SDK as described below.</p>

    <div class="highlight copyable">
		<pre class="code"><code style="objectivec">RingcaptchaAPI* controller = [[RingcaptchaAPI alloc] initWithAppKey:@&rdquo;ke8aqi8inota7y7uqibi&rdquo; andApiKey:@&rdquo;3uceti5eta9u9eby8oje&rdquo;];</code></pre>
	</div>

	<p>To Request an SMS or VOICE PIN code to be send to the phone number</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">[controller sendCaptchaCodeToNumber:@&rdquo;PHONE_NUMBER&rdquo; withService:SMS delegate:self];</code></pre>
	</div>

	<p>To Verify the PIN code entered by the user</p>

	<div class="highlight copyable">
	<pre class="code"><code style="objectivec">[controller verifyCaptchaWithCode:@&rdquo;PIN_CODE&rdquo; delegate:self];</code></pre>
	</div>

	<p>Lookup an existing session for this device for automatic onboarding</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">[controller onboardDelegate: self];</code></pre>
	</div>

	<p>And implement the following delegate methods that will be called when each API call finishes.</p>

	<p>This method is called when the communication with the server API was established correctly and a response received from the server for sending the one-time code to the phone number requested via the communication method estipulated in the app key.</p>

	<p>RingcaptchaResponse object will be populated with the data received from the server such as: token, serviceType (e.g.: SMS, VOICE), status (e.g.: SUCCESS, ERROR), errorMessage (e.g.: ERROR_INVALID_PIN_CODE, etc), phone (e.g.: +123456789), transactionId (unique id for this verification transaction) and timeout (used when attempts have been blocked for X time)</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishCodeRequest: (RingcaptchaResponse*) rsp;</code></pre>
	</div>

	<p>This method is called when there is a communication error with the server API for sending the one-time code to the phone number requested via the communication method estipulated in the app key.</p>

	<p>NSError object will be populated with the NSLocalizedDescriptionKey and NSUnderlyingErrorKey with their corresponding exceptions user info and description.</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishCodeRequestWithError: (NSError*) err;</code></pre>
	</div>

	<p>This method is called when the communication with the server API was established correctly and a response received from the server for checking the one-time code to the phone number requested via the communication method estipulated in the app key.</p>

	<p>RingcaptchaResponse object will be populated with the status data received from the server such as: status (e.g.: SUCCESS, ERROR), errorMessage (e.g.: ERROR_INVALID_PIN_CODE, etc) and timeout (used when attempts have been blocked for X time)</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishCheckRequest: (RingcaptchaResponse*) rsp;</code></pre>
	</div>

	<p>This method is called when there is a communication error with the server API for checking the one-time code to the phone number requested via the communication method estipulated in the app key and secret key/api key.</p>

	<p>NSError object will be populated with the NSLocalizedDescriptionKey and NSUnderlyingErrorKey with their corresponding exceptions user info and description.</p>

	<div class="highlight copyable">
	<pre class="code"><code style="objectivec">- (void) didFinishCheckRequestWithError: (NSError*) err;</code></pre></div>

	<p>This method is called when the communication with the server API was established correctly and a response received from the server for verifying the one-time code to the phone number requested via the communication method estipulated in the app key.</p>

	<p>RingcaptchaResponse object will be populated with the data received from the server such as: token, serviceType (e.g.: SMS, VOICE), status (e.g.: NEW, SUCCESS, ERROR), errorMessage (e.g.: ERROR_INVALID_PIN_CODE, etc), phone (e.g.: +123456789), transactionId (unique id for this verification transaction) and timeout (used when attempts have been blocked for X time)</p>

	<div class="highlight copyable">
	<pre class="code"><code style="objectivec">- (void) didFinishVerifyRequest: (RingcaptchaResponse*) rsp;</code></pre></div>

	<p>This method is called when there is a communication error with the server API for verifying the one-time code to the phone number requested via the communication method estipulated in the app key and secret key.</p>

	<p>NSError object will be populated with the NSLocalizedDescriptionKey and NSUnderlyingErrorKey with their corresponding exceptions user info and description.</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishVerifyRequestWithError: (NSError*) err;</code></pre>
	</div>

	<p>This method is called when the API successfully found open sessions for this device</p>

	<p>NSError object will be populated with the NSLocalizedDescriptionKey and NSUnderlyingErrorKey with their corresponding exceptions user info and description.</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishOnBoardRequest: (RingcaptchaResponse* ) rsp;</code></pre>
	</div>

	<p>This method is called when the API could not find an open onboard session for this device</p>

	<p>NSError object will be populated with the NSLocalizedDescriptionKey and NSUnderlyingErrorKey with their corresponding exceptions user info and description.</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishOnBoardRequestNew:(RingcaptchaResponse)rsp;</code></pre>
	</div>

	<p>This method is called when there is a communication error with the server API for onboarding</p>

	<p>NSError object will be populated with the NSLocalizedDescriptionKey and NSUnderlyingErrorKey with their corresponding exceptions user info and description.</p>

	<div class="highlight copyable">
		<pre class="code"><code style="objectivec">- (void) didFinishOnBoardRequestWithError: (NSError*) err;</code></pre>
	</div>

</div>
</article>
					<aside class="col-sm-3 secundary-menu">
						<div class="secundary-inside">
							<h3><a href="/docs">Overview</a></h3>
							<p></p>
							<div class="panel-group" id="accordion">
								<div class="panel">
									<div class="panel-heading">
										<h4>
											<a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#web">HTML & JS</a>
										</h4>
									</div>
									<div id="web" class="panel-collapse collapse">
										<ul class="panel-body">
											<li><a href="/docs/web">Installing the HTML &amp; JS Widget</a></li>
											<li><a href="/docs/web">Launching an Onboarding widget</a></li>
											<li><a href="/docs/web">Launching a Verification widget</a></li>
											<li><a href="/docs/web">Customizing the HTML &amp; JS Widget</a></li>
											<li><a href="/docs/web">Verifying the PIN code</a></li>
										</ul>
									</div>
								</div>
							 	<div class="panel">
									<div class="panel-heading">
										<h4>
											<a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#android">Android</a>
										</h4>
									</div>
									<div id="android" class="panel-collapse collapse">
										<ul class="panel-body">
											<li><a href="/docs/android">Installing the Android SDK</a></li>
											<li><a href="/docs/android">Launching an Onboarding widget</a></li>
											<li><a href="/docs/android">Launching a Verification widget</a></li>
											<li><a href="/docs/android">Implementing your own UI</a></li>
										</ul>
									</div>
								</div>
								<div class="panel">
									<div class="panel-heading">
										<h4>
											<a data-toggle="collapse" data-parent="#accordion" href="#ios">iOS</a>
										</h4>
									</div>
									<div id="ios" class="panel-collapse collapse in">
										<ul class="panel-body">
											<li><a href="/docs/ios">Installing the iOS SDK</a></li>
											<li><a href="/docs/ios">Launching an Onboarding widget</a></li>
											<li><a href="/docs/ios">Launching a Verification widget</a></li>
											<li><a href="/docs/ios">Implementing your own UI</a></li>
										</ul>
									</div>
								</div>
								<div class="panel">
									<div class="panel-heading">
										<h4>
											<a class="collapsed" data-toggle="collapse" data-parent="#accordion" href="#api">Rest API</a>
										</h4>
									</div>
									<div id="api" class="panel-collapse collapse">
										<ul class="panel-body">
											<li>
												<a href="/docs/api">Phone Verification</a>
											</li>
											<li><a href="/docs/api">SMS Gateway</a></li>
											<li><a href="/docs/api">Phone Number Information</a></li>
											<li><a href="/docs/api">Metrics</a></li>
											<li><a href="/docs/api">Apps</a></li>
											<li><a href="/docs/api">Error Codes</a></li>
										</ul>
									</div>
								</div>
								<div class="panel">
									<div class="panel-heading">
										<h4>
											<a class="expanded" target="_blank" href="//groups.google.com/forum/#!forum/ringcaptcha">FAQ &amp; Forum</a>
										</h4>
									</div>
								</div>
							</div>
						</div>
					</aside>
				</div>
			</div>
		</div>
	</div>
</div>
  </section>
  <footer role="contentinfo" id="footer">
    <div class="container-fluid">
      <div class="row" style="font-size: 12px;">
        <div class="col-sm-6">
          <p>Copyright &copy; RingCaptcha 2016. All Rights Reserved.</p>
        </div>
        <div class="col-sm-6">
          <div class="pull-right footer-menu">
            <a href="javascript:void();" class="js-privacy-popup">Privacy Policy</a>
            <a href="javascript:void();" class="js-terms-popup">Terms of Service</a>
          </div>
        </div>
      </div>
    </div>
  </footer>
</div>
